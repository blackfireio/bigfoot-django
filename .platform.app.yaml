# The name of this app. Must be unique within a project.
name: app

# The runtime the application uses. The 'type' key defines the base container
# image that will be used to run the application. There is a separate base
# container image for each primary language for the application,
# in multiple versions. Check the Python documentation
# (https://docs.platform.sh/languages/python.html#supported-versions)
# to find the supported versions for the 'python' type.
type: 'python:3.9'

runtime:
    extensions:
        - blackfire

# The build-time dependencies of the app.
dependencies:
    python3:
        pip: '21.0'
        pipenv: '2020.11.15'
        supervisor: '*'

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form <service name>:<endpoint name>.
relationships:
    database: 'dbpostgres:postgresql'

# The configuration of app when it is exposed to the web.
web:
    upstream:
        socket_family: unix
    # Commands are run once after deployment to start the application process.
    commands:
        start: "supervisord -n -c supervisord.conf"
    locations:
        "/":
            passthru: true
        "/static":
            root: "static"
            expires: 1h
            allow: true

# The size of the persistent disk of the application (in MB).
disk: 512

# The following block defines a single writable directory, 'web/uploads'
# The 'source' specifies where the writable mount is. The 'local' source
# indicates that the mount point will point to a local directory on the
# application container. The 'source_path' specifies the subdirectory
# from within the source that the mount should point at. 
#
# Set a local R/W mount for logs
mounts:
    'logs':
        source: local
        source_path: logs

# The hooks executed at various points in the lifecycle of the application.
hooks:
  # The build hook runs before the application is deployed, and is useful for
  # assembling the codebase.
  build: |
    # Installing blackfire-agent
    (
        mkdir -p ${PLATFORM_CACHE_DIR}/blackfire
        cd ${PLATFORM_CACHE_DIR}/blackfire
        wget -q -O blackfire.tar.gz -L https://blackfire.io/api/v1/releases/cli/linux/amd64
        tar -xzf blackfire.tar.gz
        chmod +x blackfire
        cp blackfire ${PLATFORM_APP_DIR}/.global/bin/blackfire
        rm blackfire.tar.gz blackfire blackfire.sha1
    )

    pip install blackfire-1.5.6-cp39-cp39-linux_x86_64.whl --force-reinstall
    pipenv install --system --deploy
    mkdir logs
    python manage.py collectstatic
    rm -rf logs
  deploy: |
    python manage.py migrate
    python manage.py generate_fake_data
